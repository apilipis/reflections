Viewing a diff between two versions of a file helped me to see the bug that was introduced by going through many lines of code and highlighting the lines of code that did not match. From there, I could narrow down my search within these few lines of code to determine where the bug was. Viewing the diff showed me how useful this function is and how a single typo in code can make a hug impact on the output. 
Having easy access to the entire history of a file could make me a more efficient programmer in the term because I would be able to de-bug code much more efficiently and also understand the chronological evolution of file.
The pros and cons of manually choosing when to create a commit are that it gives the programmer the flexibility to save when makes logical sense to them. The problem with this is that there can end being too many commits or too few commits due to user error. 
I think some version control systems allow saving multiple files in one commit while others treat each file separately due to the nature of the files. If there are files that are related to each other, then it makes sense to commit as one whereas if there are unrelated files, saving separately maybe more logical. 
You can use the command git log to view the history of commits in a file and the git diff to compare the differences in code between different commits.
Using version control could make me more confident to make changes that could break something because I know that through my commits I am able to go through the previous versions of code and fix whatever mistakes I might have made. 
Now that I have my workspace set up, I want to try using Git for some IoT projects with Raspberry Pi and AWS!