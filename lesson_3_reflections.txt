When would you want to use a remote repository rather than keeping all your work local?

    You would want to use a remote repository rather than keeping all your work local to first of all have a backup
    in case something happened to your local drive and also having a remote repository is great for collaborative projects 
    so multiple people can work on the same file.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You might want to always pull changes manually rather than having Git
    automatically stay up-to-date with your remote repository because there 
    might be mutiple pull changes in one Git update. By manually pulling 
    changes, you can ensure you have an accurate commit history.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are used specifically in GitHub to integrate someone else's repository into 
    your profile. Clones are used in both GitHub and the working directory and branches 
    are used in the working directory when new features are being added to the master
    project.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    The benefit of having a copy of the last known state of the remote stored locally
    is that you can see what were the last changes made to the remote and you can access it
    without the Internet. 

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would collaborate without using Git or GitHub by using Google Docs or DropBox. 
    While people would be able to collaborate, it would not be as secure and as customized
    as the Git/GitHub interface for coding projects.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    You would want to make changes in a separate branch rather than directly in the master when
    you are adding an experimental feature or trying out a new language, etc. The code on these
    separate branches might not be production ready yet so keeping them separate from the master 
    allows you to have a polished version and the potentially buggy demo versions. The benefits of
    only having master branch is that you have everything in one place and can easily follow the commit
    history. On the other hand, you risk putting all your eggs in one basket by only having a linear master branch.
